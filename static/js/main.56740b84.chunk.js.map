{"version":3,"sources":["components/Formulario.js","components/Cancion.js","components/Info.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","guardarBusquedaLetra","useState","artista","cancion","busqueda","guardarBusqueda","error","guardarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","type","placeholder","onChange","Cancion","letra","length","Info","info","Object","keys","strArtistThumb","strGenre","strBiographyES","src","alt","href","strFacebook","rel","strTwitter","App","busquedaletra","guardarLetra","guardarInfo","useEffect","a","async","url","url2","Promise","all","axios","informacion","data","lyrics","artists","consultarApiLetra","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56740b84.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Formulario = ({guardarBusquedaLetra}) => {\n\n    const [busqueda, guardarBusqueda] = useState({\n        artista: '',\n        cancion: ''\n    });\n    const [ error, guardarError] = useState(false);\n\n    const { artista, cancion } = busqueda;\n\n    // función a cada input para leer su contenido\n    const actualizarState = e => {\n        guardarBusqueda({\n            ...busqueda,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    // consultar las apis\n    const buscarInformacion = e => {\n        e.preventDefault();\n\n        if(artista.trim() === '' || cancion.trim() === ''){\n            guardarError(true);\n            return;\n        }\n        guardarError(false);\n        // Todo bien, pasar al componente principal\n\n        guardarBusquedaLetra(busqueda);\n    }\n\n    return ( \n        <div className=\"bg-info\">\n            { error ? <p className=\"alert alert-danger text-center p-2\">Todos los campos son obligatorios</p> : null}\n            <div className=\"container\">\n                <div className=\"row\">\n                    \n                    <form \n                        onSubmit={buscarInformacion}\n                        className=\"col card text-white bg-transparent mb-5 pt-5 pb-2\"\n                    >\n                        <fieldset>\n                            <legend className=\"text-center\">Buscador Letras Canciones</legend>\n\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label>Artista</label>\n                                        <input\n                                            type=\"text\"\n                                            className=\"form-control\"\n                                            name=\"artista\"\n                                            placeholder=\"Nombre Artista\"\n                                            onChange={actualizarState}\n                                            value={artista}\n                                        />\n                                    </div>\n                                    \n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label>Canción</label>\n                                        <input\n                                            type=\"text\"\n                                            className=\"form-control\"\n                                            name=\"cancion\"\n                                            placeholder=\"Nombre Canción\"\n                                            onChange={actualizarState}\n                                            value={cancion}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n\n                            <button \n                                type=\"submit\" \n                                className=\"btn btn-primary float-right\"\n                            >Buscar</button>\n                        </fieldset>\n\n                    </form>\n                </div>\n            </div>\n        </div>\n     );\n}\n \nexport default Formulario;","import React, { Fragment } from 'react';\n\nconst Cancion = ({letra}) => {\n\n    if(letra.length === 0) return null;\n\n    return ( \n        <Fragment>\n            <h2>Letra Canción</h2>\n            <p className=\"letra\">{letra}</p>\n        </Fragment>\n    );\n}\n \nexport default Cancion;","import React from 'react';\n\nconst Info = ({info}) => {\n\n    if(Object.keys(info).length === 0 ) return null;\n\n    const { strArtistThumb, strGenre, strBiographyES } = info;\n    \n    return ( \n        <div className=\"card border-light\">\n            <div className=\"card-header bg-primary text-light font-weight-bold\">\n                Información Artista\n            </div>\n            <div className=\"card-body\">\n                <img src={strArtistThumb} alt=\"Logo Artista\" />\n                <p className=\"card-text\">Género: {strGenre}</p>\n                <h2 className=\"card-text\">Biografía:</h2>\n                <p className=\"card-text\">{strBiographyES}</p>\n                <p className=\"card-text\">\n                    <a href={`https://${info.strFacebook}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className=\"fab fa-facebook\"></i>\n                    </a>\n                    <a href={`https://${info.strTwitter}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className=\"fab fa-twitter\"></i>\n                    </a>\n                    {/* <a href={`${info.strLastFMChart}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className=\"fab fa-lastfm\"></i>\n                    </a> */}\n                    \n                </p>\n            </div>\n        </div>\n     );\n}\n \nexport default Info;","import React, { Fragment, useState, useEffect } from 'react';\nimport Formulario from './components/Formulario';\nimport Cancion from './components/Cancion';\nimport Info from './components/Info';\nimport axios from 'axios';\n\nfunction App() {\n\n  // definir el state\n  const [ busquedaletra, guardarBusquedaLetra ] = useState({});\n  const [ letra, guardarLetra] = useState('');\n  const [info, guardarInfo] = useState({});\n\n  useEffect(() => {\n    if(Object.keys(busquedaletra).length === 0 ) return;\n\n    const consultarApiLetra = async () => {\n      const { artista, cancion } = busquedaletra;\n      const url = `https://api.lyrics.ovh/v1/${artista}/${cancion}`;\n      const url2 = `https://www.theaudiodb.com/api/v1/json/1/search.php?s=${artista}`;\n\n      const [letra, informacion] = await Promise.all([\n        axios(url),\n        axios(url2)\n      ]);\n\n      guardarLetra(letra.data.lyrics);\n      guardarInfo(informacion.data.artists[0]);\n\n      // guardarLetra(resultado.data.lyrics);\n    }\n    consultarApiLetra();\n  }, [busquedaletra, info]);\n\n  return (\n      <Fragment>\n          <Formulario \n            guardarBusquedaLetra={guardarBusquedaLetra}\n          />\n\n          <div className=\"container mt-5\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <Info \n                  info={info}\n                />\n              </div>\n              <div className=\"col-md-6\">\n                  <Cancion \n                    letra={letra}\n                  />\n              </div>\n            </div>\n          </div>\n      </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}